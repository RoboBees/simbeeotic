// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Command.proto

package bbserver.protocol;

public final class BBCommandInterface {
  private BBCommandInterface() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class Command extends
      com.google.protobuf.GeneratedMessage {
    // Use Command.newBuilder() to construct.
    private Command() {
      initFields();
    }
    private Command(boolean noInit) {}
    
    private static final Command defaultInstance;
    public static Command getDefaultInstance() {
      return defaultInstance;
    }
    
    public Command getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bbserver.protocol.BBCommandInterface.internal_static_bbserver_protocol_Command_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bbserver.protocol.BBCommandInterface.internal_static_bbserver_protocol_Command_fieldAccessorTable;
    }
    
    // required uint32 cmd = 1;
    public static final int CMD_FIELD_NUMBER = 1;
    private boolean hasCmd;
    private int cmd_ = 0;
    public boolean hasCmd() { return hasCmd; }
    public int getCmd() { return cmd_; }
    
    // required uint32 throttle = 2;
    public static final int THROTTLE_FIELD_NUMBER = 2;
    private boolean hasThrottle;
    private int throttle_ = 0;
    public boolean hasThrottle() { return hasThrottle; }
    public int getThrottle() { return throttle_; }
    
    // required uint32 yaw = 3;
    public static final int YAW_FIELD_NUMBER = 3;
    private boolean hasYaw;
    private int yaw_ = 0;
    public boolean hasYaw() { return hasYaw; }
    public int getYaw() { return yaw_; }
    
    // required uint32 pitch = 4;
    public static final int PITCH_FIELD_NUMBER = 4;
    private boolean hasPitch;
    private int pitch_ = 0;
    public boolean hasPitch() { return hasPitch; }
    public int getPitch() { return pitch_; }
    
    // required uint32 roll = 5;
    public static final int ROLL_FIELD_NUMBER = 5;
    private boolean hasRoll;
    private int roll_ = 0;
    public boolean hasRoll() { return hasRoll; }
    public int getRoll() { return roll_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasCmd) return false;
      if (!hasThrottle) return false;
      if (!hasYaw) return false;
      if (!hasPitch) return false;
      if (!hasRoll) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCmd()) {
        output.writeUInt32(1, getCmd());
      }
      if (hasThrottle()) {
        output.writeUInt32(2, getThrottle());
      }
      if (hasYaw()) {
        output.writeUInt32(3, getYaw());
      }
      if (hasPitch()) {
        output.writeUInt32(4, getPitch());
      }
      if (hasRoll()) {
        output.writeUInt32(5, getRoll());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCmd()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getCmd());
      }
      if (hasThrottle()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, getThrottle());
      }
      if (hasYaw()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, getYaw());
      }
      if (hasPitch()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, getPitch());
      }
      if (hasRoll()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, getRoll());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bbserver.protocol.BBCommandInterface.Command parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bbserver.protocol.BBCommandInterface.Command parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bbserver.protocol.BBCommandInterface.Command parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bbserver.protocol.BBCommandInterface.Command parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bbserver.protocol.BBCommandInterface.Command parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bbserver.protocol.BBCommandInterface.Command parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bbserver.protocol.BBCommandInterface.Command parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bbserver.protocol.BBCommandInterface.Command parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bbserver.protocol.BBCommandInterface.Command parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bbserver.protocol.BBCommandInterface.Command parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bbserver.protocol.BBCommandInterface.Command prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bbserver.protocol.BBCommandInterface.Command result;
      
      // Construct using bbserver.protocol.BBCommandInterface.Command.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bbserver.protocol.BBCommandInterface.Command();
        return builder;
      }
      
      protected bbserver.protocol.BBCommandInterface.Command internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bbserver.protocol.BBCommandInterface.Command();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bbserver.protocol.BBCommandInterface.Command.getDescriptor();
      }
      
      public bbserver.protocol.BBCommandInterface.Command getDefaultInstanceForType() {
        return bbserver.protocol.BBCommandInterface.Command.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bbserver.protocol.BBCommandInterface.Command build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bbserver.protocol.BBCommandInterface.Command buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bbserver.protocol.BBCommandInterface.Command buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bbserver.protocol.BBCommandInterface.Command returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bbserver.protocol.BBCommandInterface.Command) {
          return mergeFrom((bbserver.protocol.BBCommandInterface.Command)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bbserver.protocol.BBCommandInterface.Command other) {
        if (other == bbserver.protocol.BBCommandInterface.Command.getDefaultInstance()) return this;
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasThrottle()) {
          setThrottle(other.getThrottle());
        }
        if (other.hasYaw()) {
          setYaw(other.getYaw());
        }
        if (other.hasPitch()) {
          setPitch(other.getPitch());
        }
        if (other.hasRoll()) {
          setRoll(other.getRoll());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCmd(input.readUInt32());
              break;
            }
            case 16: {
              setThrottle(input.readUInt32());
              break;
            }
            case 24: {
              setYaw(input.readUInt32());
              break;
            }
            case 32: {
              setPitch(input.readUInt32());
              break;
            }
            case 40: {
              setRoll(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required uint32 cmd = 1;
      public boolean hasCmd() {
        return result.hasCmd();
      }
      public int getCmd() {
        return result.getCmd();
      }
      public Builder setCmd(int value) {
        result.hasCmd = true;
        result.cmd_ = value;
        return this;
      }
      public Builder clearCmd() {
        result.hasCmd = false;
        result.cmd_ = 0;
        return this;
      }
      
      // required uint32 throttle = 2;
      public boolean hasThrottle() {
        return result.hasThrottle();
      }
      public int getThrottle() {
        return result.getThrottle();
      }
      public Builder setThrottle(int value) {
        result.hasThrottle = true;
        result.throttle_ = value;
        return this;
      }
      public Builder clearThrottle() {
        result.hasThrottle = false;
        result.throttle_ = 0;
        return this;
      }
      
      // required uint32 yaw = 3;
      public boolean hasYaw() {
        return result.hasYaw();
      }
      public int getYaw() {
        return result.getYaw();
      }
      public Builder setYaw(int value) {
        result.hasYaw = true;
        result.yaw_ = value;
        return this;
      }
      public Builder clearYaw() {
        result.hasYaw = false;
        result.yaw_ = 0;
        return this;
      }
      
      // required uint32 pitch = 4;
      public boolean hasPitch() {
        return result.hasPitch();
      }
      public int getPitch() {
        return result.getPitch();
      }
      public Builder setPitch(int value) {
        result.hasPitch = true;
        result.pitch_ = value;
        return this;
      }
      public Builder clearPitch() {
        result.hasPitch = false;
        result.pitch_ = 0;
        return this;
      }
      
      // required uint32 roll = 5;
      public boolean hasRoll() {
        return result.hasRoll();
      }
      public int getRoll() {
        return result.getRoll();
      }
      public Builder setRoll(int value) {
        result.hasRoll = true;
        result.roll_ = value;
        return this;
      }
      public Builder clearRoll() {
        result.hasRoll = false;
        result.roll_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bbserver.protocol.Command)
    }
    
    static {
      defaultInstance = new Command(true);
      bbserver.protocol.BBCommandInterface.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bbserver.protocol.Command)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bbserver_protocol_Command_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bbserver_protocol_Command_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023proto/Command.proto\022\021bbserver.protocol" +
      "\"R\n\007Command\022\013\n\003cmd\030\001 \002(\r\022\020\n\010throttle\030\002 \002" +
      "(\r\022\013\n\003yaw\030\003 \002(\r\022\r\n\005pitch\030\004 \002(\r\022\014\n\004roll\030\005" +
      " \002(\rB\024B\022BBCommandInterface"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_bbserver_protocol_Command_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_bbserver_protocol_Command_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bbserver_protocol_Command_descriptor,
              new java.lang.String[] { "Cmd", "Throttle", "Yaw", "Pitch", "Roll", },
              bbserver.protocol.BBCommandInterface.Command.class,
              bbserver.protocol.BBCommandInterface.Command.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
